generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  user
  tenant
}

enum BookingStatus {
  waiting_for_payment
  waiting_for_confirmation
  confirmed
  cancelled
  expired
  completed
  rejected
}

enum PaymentMethod {
  manual_transfer
  payment_gateway
}

enum PriceChangeType {
  nominal
  percentage
}

model User {
  id                Int                  @id @default(autoincrement())
  name              String?
  email             String               @unique
  password          String?
  role              UserRole
  avatarUrl         String?              @map("avatar_url")
  isEmailVerified   Boolean              @default(false) @map("is_email_verified")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime?            @map("updated_at")
  deletedAt         DateTime?            @map("deleted_at")

  // relations
  properties        Property[]            @relation("PropertyOwner")
  bookings          Booking[]             @relation("UserBookings")
  tenantBookings    Booking[]             @relation("TenantBookings")
  reviews           Review[]
  reviewReplies     ReviewReply[]
  peakSeasons       PeakSeason[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]
}

model EmailVerification {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  token      String   @unique
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  token      String   @unique
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  properties  Property[]
}

model Property {
  id          Int            @id @default(autoincrement())
  tenant      User           @relation("PropertyOwner", fields: [tenantId], references: [id])
  tenantId    Int            @map("tenant_id")
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  Int?           @map("category_id")
  name        String
  slug        String         @unique
  description String?
  address     String?
  city        String?
  province    String?
  latitude    Float?         @map("latitude")
  longitude   Float?         @map("longitude")
  published   Boolean        @default(false)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime?      @map("updated_at")
  deletedAt   DateTime?      @map("deleted_at")

  images      PropertyImage[]
  rooms       Room[]
  reviews     Review[]
  peakSeasons PeakSeason[]
  bookingItems BookingItem[]
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int      @map("property_id")
  url        String
  altText    String?  @map("alt_text")
  isPrimary  Boolean  @default(false) @map("is_primary")
  createdAt  DateTime @default(now()) @map("created_at")
}

model Room {
  id          Int       @id @default(autoincrement())
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int       @map("property_id")
  name        String
  capacity    Int
  basePrice   Int       @map("base_price")
  description String?
  totalUnits  Int       @default(1) @map("total_units")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  images      RoomImage[]
  blackouts   RoomBlackout[]
  priceOverrides RoomPriceOverride[]
  peakSeasons PeakSeason[]
  bookingItems BookingItem[]
}

model RoomImage {
  id        Int    @id @default(autoincrement())
  room      Room   @relation(fields: [roomId], references: [id])
  roomId    Int    @map("room_id")
  url       String
  altText   String? @map("alt_text")
  isPrimary Boolean @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")
}

model RoomBlackout {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int      @map("room_id")
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  reason    String? 
  createdAt DateTime @default(now()) @map("created_at")
}

model RoomPriceOverride {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int      @map("room_id")
  date      DateTime
  price     Int
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([roomId, date], map: "room_date_unique")
}

model PeakSeason {
  id            Int           @id @default(autoincrement())
  tenant        User          @relation(fields: [tenantId], references: [id])
  tenantId      Int           @map("tenant_id")
  property      Property?     @relation(fields: [propertyId], references: [id])
  propertyId    Int?          @map("property_id")
  room          Room?         @relation(fields: [roomId], references: [id])
  roomId        Int?          @map("room_id")
  startDate     DateTime      @map("start_date")
  endDate       DateTime      @map("end_date")
  changeType    PriceChangeType @map("change_type")
  changeValue   Int           @map("change_value")
  applyToAll    Boolean       @default(false) @map("apply_to_all_rooms")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime?     @map("updated_at")
}

model Booking {
  id           Int         @id @default(autoincrement())
  bookingNo    String      @unique @map("booking_no")
  user         User        @relation("UserBookings", fields: [userId], references: [id])
  userId       Int         @map("user_id")
  tenant       User        @relation("TenantBookings", fields: [tenantId], references: [id])
  tenantId     Int         @map("tenant_id")
  status       BookingStatus @default(waiting_for_payment)
  totalAmount  Int         @map("total_amount")
  finalAmount  Int         @map("final_amount")
  paymentMethod PaymentMethod @map("payment_method")
  paymentProofUrl String?   @map("payment_proof_url")
  expiresAt    DateTime?   @map("expires_at")
  checkIn      DateTime?   @map("check_in")
  checkOut     DateTime?   @map("check_out")
  nights       Int?
  totalGuests  Int?        @map("total_guests")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime?   @map("updated_at")
  deletedAt    DateTime?   @map("deleted_at")

  items        BookingItem[]
  payments     Payment[]
  reviews      Review[]
}

model BookingItem {
  id         Int     @id @default(autoincrement())
  booking    Booking @relation(fields: [bookingId], references: [id])
  bookingId  Int     @map("booking_id")
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int     @map("property_id")
  room       Room    @relation(fields: [roomId], references: [id])
  roomId     Int     @map("room_id")
  unitCount  Int     @map("unit_count")
  unitPrice  Int     @map("unit_price")
  nights     Int
  subTotal   Int     @map("sub_total")
  createdAt  DateTime @default(now()) @map("created_at")
}

model Payment {
  id           Int      @id @default(autoincrement())
  booking      Booking  @relation(fields: [bookingId], references: [id])
  bookingId    Int      @map("booking_id")
  amount       Int
  method       PaymentMethod
  reference    String?  // optional tx id
  confirmedAt  DateTime? @map("confirmed_at")
  createdAt    DateTime @default(now()) @map("created_at")
}

model Review {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int      @map("property_id")
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  Int      @map("booking_id")
  rating     Int
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  deletedAt  DateTime? @map("deleted_at")
  replies    ReviewReply[]
}

model ReviewReply {
  id        Int    @id @default(autoincrement())
  review    Review @relation(fields: [reviewId], references: [id])
  reviewId  Int    @map("review_id")
  tenant    User   @relation(fields: [tenantId], references: [id])
  tenantId  Int    @map("tenant_id")
  replyText String @map("reply_text")
  createdAt DateTime @default(now()) @map("created_at")
}